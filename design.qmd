---
title: "Design"
date: ""
---

## Overview

::: {#fig-overall-bd}
![](images/Overview%20Block%20Diagram.jpg)

Block diagram of the final system
:::

::: {#fig-overall-schematic}
![](images/project_schematic_revB.png)

The full system schematic
:::

## Sensor

An EMG sensor detects electrical activity in muscles via a conductive pad on the skin. Electrical signals on the skin are typically between 50Î¼V to 30mV, depending on the quality of the electrode pads and the individual. An EMG sensor amplifies this signal with a gain between ~33x to 100000x and outputs an analog signal.

We took inspiration from, but did not fully use, a commercial MYG sensor that was out of our budget. We substituted a different instrumentation amp (AD623) because we did not have the original schematic part in the stockroom. We also removed the decoupling capacitor that was meant to remove the DC offset becasue it removed the whole signal. We kept the high pass filter because it was already built into the circuit, and the full wave rectifier because we need it to protect the pins of the MCU. We discarded the rest of the circuit after the rectification. \


## MCU
### Design

::: {#fig-mcu-overall-flow}
![](images/MCU_flow.png)

Graphic showing how the signals flow in the MCU
:::

The Analog-to-Digital Converter (ADC) was our new peripheral for the project. After initializing, ADC1 reads in channels 10 and 11 from pins PA5 and PA6, which are players 1 and 2 respectively. Each time that the data register is read, the 16 bit data register is stored in a volatile uint_16t. Because resolution is set to 12 bits (the max), the 16 bit data register has 4 extra zeros at the top. It is easy to get rid of them inside the FPGA, and 16 bits divides nicely into 2 characters of 8 bits each, which is the size of a SPI transaction. The characters are stored in an array via a pointer. \
The other peripheral in use is the SPI peripheral. A pointer to the char array that the ADC populates is passed into a modified version of the lab 7 SPI code. It sends the 4 chars to the FPGA in the order MSB1, LSB1, MSB2, LSB2.\

### Testing
::: {#fig-mcu-4-char-spi}
![](images/4_char_spi.jpg)

SPI from the MCU to the FPGA.  
D0 - CS, D1 - MOSI, D2 - MISO, D3 - SCK, D4 - LOAD
:::
As seen in @fig-mcu-4-char-spi, the ADC reads in the values and then the SPI peripheral sends them out. In addition to the regular SPI signals, there is also a `load` signal that we use to tell the FPGA when to shift in new data.\

## FPGA
### Design

::: {#fig-fpga-bd}
![](images/FPGA%20Block%20Diagram%20Demo.jpg)

Block diagram of the FPGA and LED matrix
:::

We have designed and started implementation of the FPGA, but it is not yet functional. The design for our first `demo_top` module is shown in @fig-fpga-bd. The module that shifts in the SPI data was modified from aes_spi from Lab 7. However, we don't need to send anything back to the MCU, so SDO will shift out nonsense. Because we intended to only use 12 bits of the received data because our resolution is only 12 bits, all our ports were sized for 12 bits, not 16. This is easily corrected in the top module. The `single` module has an FSM to determine which screen to show based on who is currently winning and who has been winning most recently. The current setup uses a `demo_display` module takes that screen and converts it into a simple led bar to show a coarse resolution. This is a temporary setup that will be replaced soon with the full LED matrix module.\ 

