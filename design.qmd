---
title: "Design"
date: ""
---

## Overview

::: {#fig-overall-bd}
![](images/Overview Block Diagram Final.jpg)

Block diagram of the final system
:::

@fig-overall-bd shows the overall system block diagram. The system begins with two amplified signals from the muscle sensors, which is 
input into the MCU as two analog signals. The MCU then converts the signals into a concatenated 32-bit digital signals and sends the data 
across SPI to the FPGA. The FPGA reads the SPI signal and contains modules to determine both players' data and displays them on the LED 
display through an fsm module that converts a desired screen display into the correct output pins for interfacing with the display matrix. 
The display matrix interprets the output signals sequentially at a frequency of 1.5MHz to display the screen.

::: {#fig-overall-schmatic}
![](images/project_schmatic.png)

The full system schematic
:::

## Sensor

We took inspiration from, but did not fully use, a commercial MYG sensor that was out of our budget. This was good for the budget but bad for our time management as we ran into several issues.



First, when we substitued a different instrumentation amp (the AD623) because we did not have the original schmatic part in the stockroom, we saw a large DC offset. This came from the large resistor we had between reference and ground, which was incorrect and made reference float. We fixed it by connecting reference directly to ground. Also, the decoupling capacitor that was meant to remove the DC offset removed the whole signal, so we removed the capacitor. We kept the high pass filter because it was already built into the circuit, and the full wave rectifier because we need it to protect the pins of the MCU. We discarded the rest of the circuit after the rectification because we needed to prioritze the rest of the digital design, not the analog sensor circuits. In total, we kept the instrumentation amplifier stage (with AD623), the inverting amplifier stage, and the full wave rectification stage. \


## MCU
### Design

::: {#fig-mcu-overall-flow}
![](images/MCU_flow.png)

Graphic showing how the signals flow in the MCU
:::

The ADC was our new peripheral for the project, and its device driver is complete and functional. After initializing, ADC1 reads in channels 10 and 11 from pins PA5 and PA6. These will be players 1 and 2 respectively. Each time that the data register is read, the 16 bit data register is stored in a volatile uint_16t. The 16 bits are converted into two characters (8 bits) each, which are stored in an array via a pointer. \
The other peripheral in use is the SPI peripheral. A pointer to the char array that the ADC populates is passed into a modified version of the lab 7 SPI code. It sends the 4 chars to the FPGA in the order MSB1, LSB1, MSB2, LSB2.\

### Testing
::: {#fig-mcu-4-char-spi}
![](images/4_char_spi.jpg)

SPI from the MCU to the FPGA.  
D0 - CS, D1 - MOSI, D2 - MISO, D3 - SCK, D4 - LOAD
:::
As seen in @fig-mcu-4-char-spi, the ADC reads in the values and then the SPI peripheral sends them out. In addition to the regular SPI signals, there is also a `load` signal that we will use later to tell the FPGA when to shift in new data.\

## FPGA
### Design

::: {#fig-fpga-bd}
![](images/FPGA Block Diagram.jpg)

Block diagram of the FPGA and LED matrix
:::

We have designed and started implementation of the FPGA, but it is not yet functional. The design for our first `demo_top` module is 
shown in @fig-fpga-bd. The module that shifts in the SPI data was modified from aes_spi from Lab 7. However, we don't need to send 
anything back to the MCU, so SDO will shift out nonsense. Because we intended to only use 12 bits of the received data because our 
resolution is only 12 bits, all our ports were sized for 12 bits, not 16. This is easily corrected in the top module. The `single` 
module has an FSM to determine which screen to show based on who is currently winning and who has been winning most recently. The current 
setup uses a `demo_display` module takes that screen and converts it into a simple led bar to show a coarse resolution. This is a 
temporary setup that will be replaced soon with the full LED matrix module.\ 

::: {#fig-single-fsm-tb}
![](images/Sim Single.jpg)

Testbench of single module
:::

@fig-single-fsm-tb testbench outputs the desired screen

::: {#fig-single-counter}
![](images/Sim Single Display Counter.jpg)

Testbench of singledisplay module: view of one row
:::

@fig-single-counter testbench shows singledisplay zoomed in to show counter cycling through

::: {#fig-single-abc}
![](images/Sim Single Display ABC.jpg)

Testbench of singledisplay module: view of one screen
:::

@fig-single-abc testbench shows singledisplay zoomed in to show abc cycling through for a whole screen

::: {#fig-multi-fsm-tb}
![](images/Sim Multi.jpg)

Testbench of multi module
:::

@fig-multi-fsm-tb testbench outputs the desired screen\

::: {#fig-multi-counter}
![](images/Sim Multi Display Counter.jpg)

Testbench of multidisplay module: view of one row
:::

@fig-multi-counter testbench shows multidisplay zoomed in to show counter cycling through\

::: {#fig-multi-abc}
![](images/Sim Multi Display ABC.jpg)

Testbench of multidisplay module: view of one screen
:::

@fig-multi-abc testbench shows multidisplay zoomed in to show abc cycling through for a whole screen\


line 1  
line 2