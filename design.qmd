---
title: "Design"
date: ""
---

## Overview

::: {#fig-overall-bd}
![](images/Overview Block Diagram Final.jpg)

Block diagram of the final system
:::


@fig-overall-bd shows the overall system block diagram. The system begins with two amplified signals from the muscle sensors, which is 
input into the MCU as two analog signals. The MCU then converts the signals into a concatenated 32-bit digital signals and sends the data 
across SPI to the FPGA. The FPGA reads the SPI signal and contains modules to determine both players' data and displays them on the LED 
display through an fsm module that converts a desired screen display into the correct output pins for interfacing with the display matrix. 
The display matrix interprets the output signals sequentially at a frequency of 1.5MHz to display the screen.


::: {#fig-overall-schematic}
![](images/project_schematic_revB.png)

The full system schematic
:::

## Sensor

An EMG sensor detects electrical activity in muscles via a conductive pad on the skin. Electrical signals on the skin are typically between 50Î¼V to 30mV, depending on the quality of the electrode pads and the individual. An EMG sensor amplifies this signal with a gain between ~33x to 100000x and outputs an analog signal.

We took inspiration from, but did not fully use, a commercial MYG sensor that was out of our budget. We substituted a different instrumentation amp (AD623) because we did not have the original schematic part in the stockroom. We also removed the decoupling capacitor that was meant to remove the DC offset becasue it removed the whole signal. We kept the high pass filter because it was already built into the circuit, and the full wave rectifier because we need it to protect the pins of the MCU. We discarded the rest of the circuit after the rectification. \


## MCU

::: {#fig-mcu-overall-flow}
![](images/MCU_flow.png)

Graphic showing how the signals flow in the MCU
:::

The Analog-to-Digital Converter (ADC) was our new peripheral for the project. After initializing, ADC1 reads in channels 10 and 11 from pins PA5 and PA6, which are players 1 and 2 respectively. Each time that the data register is read, the 16 bit data register is stored in a volatile uint_16t. Because resolution is set to 12 bits (the max), the 16 bit data register has 4 extra zeros at the top. It is easy to get rid of them inside the FPGA, and 16 bits divides nicely into 2 characters of 8 bits each, which is the size of a SPI transaction. The characters are stored in an array via a pointer. \
The other peripheral in use is the SPI peripheral. A pointer to the char array that the ADC populates is passed into a modified version of the lab 7 SPI code. It sends the 4 chars to the FPGA in the order MSB1, LSB1, MSB2, LSB2.\

::: {#fig-mcu-4-char-spi}
![](images/4_char_spi.jpg)

SPI from the MCU to the FPGA.  
D0 - CS, D1 - MOSI, D2 - MISO, D3 - SCK, D4 - LOAD
:::
As seen in @fig-mcu-4-char-spi, the ADC reads in the values and then the SPI peripheral sends them out. In addition to the regular SPI signals, there is also a `load` signal that we use to tell the FPGA when to shift in new data.\

## FPGA

::: {#fig-fpga-bd}
![](images/FPGA Block Diagram.jpg)

Block diagram of the FPGA and LED matrix
:::

The FPGA design contains a SPI recieve modules, two modules for selecting the screen (in single player or multiplayer mode), two modules 
which interface the selected screen into output pins for the LED matrix, and a multiplex which selects the set of output pins based on 
the player mode (@fig-fpga-bd). 

The module that shifts in the SPI data was modified from aes_spi from Lab 7. However, we don't need to send 
anything back to the MCU, so SDO will shift out nonsense. Because we intended to only use 12 bits of the received data because our 
resolution is only 12 bits, all our ports were sized for 12 bits, not 16. This is easily corrected in the top module. 

The single and multiplayer processes are very similar. The single module is an asyncrhonous module, which outputs a 
6-bit screen value depending on the input of 1 players' digital signal magnitude. The multi module is a synchronous module, which also 
outputs a screen value, but is determined by which players' digital signal magnitude is greater. The multi module also has a couple preset 
screen matrices for winning screens and a start sequence, saved as .txt files. 

::: {#fig-single-fsm-tb}
![](images/Sim Single.jpg)

Testbench of single module
:::

@fig-single-fsm-tb testbench outputs the desired screen

::: {#fig-single-counter}
![](images/Sim Single Display Counter.jpg)

Testbench of singledisplay module: view of one row
:::

@fig-single-counter testbench shows singledisplay zoomed in to show counter cycling through

::: {#fig-single-abc}
![](images/Sim Single Display ABC.jpg)

Testbench of singledisplay module: view of one screen
:::

@fig-single-abc testbench shows singledisplay zoomed in to show abc cycling through for a whole screen

::: {#fig-multi-fsm-tb}
![](images/Sim Multi.jpg)

Testbench of multi module
:::

@fig-multi-fsm-tb testbench outputs the desired screen\

::: {#fig-multi-counter}
![](images/Sim Multi Display Counter.jpg)

Testbench of multidisplay module: view of one row
:::

@fig-multi-counter testbench shows multidisplay zoomed in to show counter cycling through\

::: {#fig-multi-abc}
![](images/Sim Multi Display ABC.jpg)

Testbench of multidisplay module: view of one screen
:::

@fig-multi-abc testbench shows multidisplay zoomed in to show abc cycling through for a whole screen\


### Discussion

After the SPI module, single and multiplayer processes are run in parallel and then multiplexed before the system output, 
however this multiplex could also be done earlier to reduce processing power.

## Box
We designed a 3D printed box to hide and protect all the wires and breadboards. It is a friction fit with the LED matrix on the front. The sensor breadboard goes on the shelf, and the microPs board and breakout go on the bottom. Power enters through the back and sensor wires enter through the sides.

TODO: box 3d render or dimensioned drawing

